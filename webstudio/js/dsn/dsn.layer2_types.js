//
// Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


app_status = {
  'AS_INVALID' : 0,
  'AS_AVAILABLE' : 1,
  'AS_CREATING' : 2,
  'AS_CREATE_FAILED' : 3,
  'AS_DROPPING' : 4,
  'AS_DROP_FAILED' : 5,
  'AS_DROPPED' : 6
};
partition_configuration = function(args) {
  this.pid = null;
  this.ballot = null;
  this.max_replica_count = null;
  this.primary = null;
  this.secondaries = null;
  this.last_drops = null;
  this.last_committed_decree = null;
  if (args) {
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = new gpid(args.pid);
    }
    if (args.ballot !== undefined && args.ballot !== null) {
      this.ballot = args.ballot;
    }
    if (args.max_replica_count !== undefined && args.max_replica_count !== null) {
      this.max_replica_count = args.max_replica_count;
    }
    if (args.primary !== undefined && args.primary !== null) {
      this.primary = new rpc_address(args.primary);
    }
    if (args.secondaries !== undefined && args.secondaries !== null) {
      this.secondaries = Thrift.copyList(args.secondaries, [rpc_address]);
    }
    if (args.last_drops !== undefined && args.last_drops !== null) {
      this.last_drops = Thrift.copyList(args.last_drops, [rpc_address]);
    }
    if (args.last_committed_decree !== undefined && args.last_committed_decree !== null) {
      this.last_committed_decree = args.last_committed_decree;
    }
  }
};
partition_configuration.prototype = {};
partition_configuration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pid = new gpid();
        this.pid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ballot = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.max_replica_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.primary = new rpc_address();
        this.primary.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.secondaries = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new rpc_address();
          elem6.read(input);
          this.secondaries.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.last_drops = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new rpc_address();
          elem13.read(input);
          this.last_drops.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.last_committed_decree = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

partition_configuration.prototype.write = function(output) {
  output.writeStructBegin('partition_configuration');
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRUCT, 1);
    this.pid.write(output);
    output.writeFieldEnd();
  }
  if (this.ballot !== null && this.ballot !== undefined) {
    output.writeFieldBegin('ballot', Thrift.Type.I64, 2);
    output.writeI64(this.ballot);
    output.writeFieldEnd();
  }
  if (this.max_replica_count !== null && this.max_replica_count !== undefined) {
    output.writeFieldBegin('max_replica_count', Thrift.Type.I32, 3);
    output.writeI32(this.max_replica_count);
    output.writeFieldEnd();
  }
  if (this.primary !== null && this.primary !== undefined) {
    output.writeFieldBegin('primary', Thrift.Type.STRUCT, 4);
    this.primary.write(output);
    output.writeFieldEnd();
  }
  if (this.secondaries !== null && this.secondaries !== undefined) {
    output.writeFieldBegin('secondaries', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.secondaries.length);
    for (var iter14 in this.secondaries)
    {
      if (this.secondaries.hasOwnProperty(iter14))
      {
        iter14 = this.secondaries[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.last_drops !== null && this.last_drops !== undefined) {
    output.writeFieldBegin('last_drops', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.last_drops.length);
    for (var iter15 in this.last_drops)
    {
      if (this.last_drops.hasOwnProperty(iter15))
      {
        iter15 = this.last_drops[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.last_committed_decree !== null && this.last_committed_decree !== undefined) {
    output.writeFieldBegin('last_committed_decree', Thrift.Type.I64, 7);
    output.writeI64(this.last_committed_decree);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_query_by_index_request = function(args) {
  this.app_name = null;
  this.partition_indices = null;
  if (args) {
    if (args.app_name !== undefined && args.app_name !== null) {
      this.app_name = args.app_name;
    }
    if (args.partition_indices !== undefined && args.partition_indices !== null) {
      this.partition_indices = Thrift.copyList(args.partition_indices, [null]);
    }
  }
};
configuration_query_by_index_request.prototype = {};
configuration_query_by_index_request.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.app_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.partition_indices = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI32().value;
          this.partition_indices.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_query_by_index_request.prototype.write = function(output) {
  output.writeStructBegin('configuration_query_by_index_request');
  if (this.app_name !== null && this.app_name !== undefined) {
    output.writeFieldBegin('app_name', Thrift.Type.STRING, 1);
    output.writeString(this.app_name);
    output.writeFieldEnd();
  }
  if (this.partition_indices !== null && this.partition_indices !== undefined) {
    output.writeFieldBegin('partition_indices', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.partition_indices.length);
    for (var iter23 in this.partition_indices)
    {
      if (this.partition_indices.hasOwnProperty(iter23))
      {
        iter23 = this.partition_indices[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

configuration_query_by_index_response = function(args) {
  this.err = null;
  this.app_id = null;
  this.partition_count = null;
  this.is_stateful = null;
  this.partitions = null;
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = new error_code(args.err);
    }
    if (args.app_id !== undefined && args.app_id !== null) {
      this.app_id = args.app_id;
    }
    if (args.partition_count !== undefined && args.partition_count !== null) {
      this.partition_count = args.partition_count;
    }
    if (args.is_stateful !== undefined && args.is_stateful !== null) {
      this.is_stateful = args.is_stateful;
    }
    if (args.partitions !== undefined && args.partitions !== null) {
      this.partitions = Thrift.copyList(args.partitions, [partition_configuration]);
    }
  }
};
configuration_query_by_index_response.prototype = {};
configuration_query_by_index_response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new error_code();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.app_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.partition_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_stateful = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.partitions = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new partition_configuration();
          elem30.read(input);
          this.partitions.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

configuration_query_by_index_response.prototype.write = function(output) {
  output.writeStructBegin('configuration_query_by_index_response');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.app_id !== null && this.app_id !== undefined) {
    output.writeFieldBegin('app_id', Thrift.Type.I32, 2);
    output.writeI32(this.app_id);
    output.writeFieldEnd();
  }
  if (this.partition_count !== null && this.partition_count !== undefined) {
    output.writeFieldBegin('partition_count', Thrift.Type.I32, 3);
    output.writeI32(this.partition_count);
    output.writeFieldEnd();
  }
  if (this.is_stateful !== null && this.is_stateful !== undefined) {
    output.writeFieldBegin('is_stateful', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_stateful);
    output.writeFieldEnd();
  }
  if (this.partitions !== null && this.partitions !== undefined) {
    output.writeFieldBegin('partitions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.partitions.length);
    for (var iter31 in this.partitions)
    {
      if (this.partitions.hasOwnProperty(iter31))
      {
        iter31 = this.partitions[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

app_info = function(args) {
  this.status = 0;
  this.app_type = null;
  this.app_name = null;
  this.app_id = null;
  this.partition_count = null;
  this.envs = null;
  this.is_stateful = null;
  this.max_replica_count = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.app_type !== undefined && args.app_type !== null) {
      this.app_type = args.app_type;
    }
    if (args.app_name !== undefined && args.app_name !== null) {
      this.app_name = args.app_name;
    }
    if (args.app_id !== undefined && args.app_id !== null) {
      this.app_id = args.app_id;
    }
    if (args.partition_count !== undefined && args.partition_count !== null) {
      this.partition_count = args.partition_count;
    }
    if (args.envs !== undefined && args.envs !== null) {
      this.envs = Thrift.copyMap(args.envs, [null]);
    }
    if (args.is_stateful !== undefined && args.is_stateful !== null) {
      this.is_stateful = args.is_stateful;
    }
    if (args.max_replica_count !== undefined && args.max_replica_count !== null) {
      this.max_replica_count = args.max_replica_count;
    }
  }
};
app_info.prototype = {};
app_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.app_name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.app_id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.partition_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size32 = 0;
        var _rtmp336;
        this.envs = {};
        var _ktype33 = 0;
        var _vtype34 = 0;
        _rtmp336 = input.readMapBegin();
        _ktype33 = _rtmp336.ktype;
        _vtype34 = _rtmp336.vtype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          if (_i37 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key38 = null;
          var val39 = null;
          key38 = input.readString().value;
          val39 = input.readString().value;
          this.envs[key38] = val39;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.is_stateful = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.max_replica_count = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

app_info.prototype.write = function(output) {
  output.writeStructBegin('app_info');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.app_type !== null && this.app_type !== undefined) {
    output.writeFieldBegin('app_type', Thrift.Type.STRING, 2);
    output.writeString(this.app_type);
    output.writeFieldEnd();
  }
  if (this.app_name !== null && this.app_name !== undefined) {
    output.writeFieldBegin('app_name', Thrift.Type.STRING, 3);
    output.writeString(this.app_name);
    output.writeFieldEnd();
  }
  if (this.app_id !== null && this.app_id !== undefined) {
    output.writeFieldBegin('app_id', Thrift.Type.I32, 4);
    output.writeI32(this.app_id);
    output.writeFieldEnd();
  }
  if (this.partition_count !== null && this.partition_count !== undefined) {
    output.writeFieldBegin('partition_count', Thrift.Type.I32, 5);
    output.writeI32(this.partition_count);
    output.writeFieldEnd();
  }
  if (this.envs !== null && this.envs !== undefined) {
    output.writeFieldBegin('envs', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envs));
    for (var kiter40 in this.envs)
    {
      if (this.envs.hasOwnProperty(kiter40))
      {
        var viter41 = this.envs[kiter40];
        output.writeString(kiter40);
        output.writeString(viter41);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.is_stateful !== null && this.is_stateful !== undefined) {
    output.writeFieldBegin('is_stateful', Thrift.Type.BOOL, 7);
    output.writeBool(this.is_stateful);
    output.writeFieldEnd();
  }
  if (this.max_replica_count !== null && this.max_replica_count !== undefined) {
    output.writeFieldBegin('max_replica_count', Thrift.Type.I32, 8);
    output.writeI32(this.max_replica_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

