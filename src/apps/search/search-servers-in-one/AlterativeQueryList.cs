/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace dsn.app.search
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AlterativeQueryList : TBase
  {
    private StringQuery _RawQuery;
    private List<StringQuery> _Alterations;

    public StringQuery RawQuery
    {
      get
      {
        return _RawQuery;
      }
      set
      {
        __isset.RawQuery = true;
        this._RawQuery = value;
      }
    }

    public List<StringQuery> Alterations
    {
      get
      {
        return _Alterations;
      }
      set
      {
        __isset.Alterations = true;
        this._Alterations = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool RawQuery;
      public bool Alterations;
    }

    public AlterativeQueryList() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              RawQuery = new StringQuery();
              RawQuery.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Alterations = new List<StringQuery>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  StringQuery _elem2;
                  _elem2 = new StringQuery();
                  _elem2.Read(iprot);
                  Alterations.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AlterativeQueryList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RawQuery != null && __isset.RawQuery) {
        field.Name = "RawQuery";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        RawQuery.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Alterations != null && __isset.Alterations) {
        field.Name = "Alterations";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Alterations.Count));
          foreach (StringQuery _iter3 in Alterations)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AlterativeQueryList(");
      bool __first = true;
      if (RawQuery != null && __isset.RawQuery) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RawQuery: ");
        __sb.Append(RawQuery== null ? "<null>" : RawQuery.ToString());
      }
      if (Alterations != null && __isset.Alterations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Alterations: ");
        __sb.Append(Alterations);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
