/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace dsn.app.search
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryResult : TBase
  {
    private StringQuery _RawQuery;
    private AugmentedQuery _Query;
    private List<Caption> _Results;

    public StringQuery RawQuery
    {
      get
      {
        return _RawQuery;
      }
      set
      {
        __isset.RawQuery = true;
        this._RawQuery = value;
      }
    }

    public AugmentedQuery Query
    {
      get
      {
        return _Query;
      }
      set
      {
        __isset.Query = true;
        this._Query = value;
      }
    }

    public List<Caption> Results
    {
      get
      {
        return _Results;
      }
      set
      {
        __isset.Results = true;
        this._Results = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool RawQuery;
      public bool Query;
      public bool Results;
    }

    public QueryResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              RawQuery = new StringQuery();
              RawQuery.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Query = new AugmentedQuery();
              Query.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Results = new List<Caption>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  Caption _elem10;
                  _elem10 = new Caption();
                  _elem10.Read(iprot);
                  Results.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RawQuery != null && __isset.RawQuery) {
        field.Name = "RawQuery";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        RawQuery.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Query != null && __isset.Query) {
        field.Name = "Query";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Query.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Results != null && __isset.Results) {
        field.Name = "Results";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Results.Count));
          foreach (Caption _iter11 in Results)
          {
            _iter11.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryResult(");
      bool __first = true;
      if (RawQuery != null && __isset.RawQuery) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RawQuery: ");
        __sb.Append(RawQuery== null ? "<null>" : RawQuery.ToString());
      }
      if (Query != null && __isset.Query) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Query: ");
        __sb.Append(Query== null ? "<null>" : Query.ToString());
      }
      if (Results != null && __isset.Results) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Results: ");
        __sb.Append(Results);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
