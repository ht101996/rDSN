/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace dsn.app.search
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DocPosition : TBase
  {
    private DocId _DocIdentity;
    private int _Position;

    public DocId DocIdentity
    {
      get
      {
        return _DocIdentity;
      }
      set
      {
        __isset.DocIdentity = true;
        this._DocIdentity = value;
      }
    }

    public int Position
    {
      get
      {
        return _Position;
      }
      set
      {
        __isset.Position = true;
        this._Position = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool DocIdentity;
      public bool Position;
    }

    public DocPosition() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              DocIdentity = new DocId();
              DocIdentity.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Position = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DocPosition");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (DocIdentity != null && __isset.DocIdentity) {
        field.Name = "DocIdentity";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        DocIdentity.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.Position) {
        field.Name = "Position";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Position);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DocPosition(");
      bool __first = true;
      if (DocIdentity != null && __isset.DocIdentity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DocIdentity: ");
        __sb.Append(DocIdentity== null ? "<null>" : DocIdentity.ToString());
      }
      if (__isset.Position) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Position: ");
        __sb.Append(Position);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
